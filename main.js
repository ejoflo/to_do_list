/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/data.js":
/*!*********************!*\
  !*** ./src/data.js ***!
  \*********************/
/*! exports provided: masterList, itemFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"masterList\", function() { return masterList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemFactory\", function() { return itemFactory; });\nconst masterList = (function() {\n    const listArray = [];\n    \n    const getNewListName = () => {   // gets the user provided list name\n        let listName = prompt('What is the name of this list?');\n        return listName;\n    };\n\n    const addNewList = (newListName) => {   // create a new list from user provided input\n        let newUserList = listFactory(newListName);\n        listArray.push(newUserList);\n    };\n\n    const removeList = (listIndex) => {   // permanently removes a list from the \"master\" array\n        let deletedList = listArray.splice(listIndex, 1); // can use as purgatory\n    };\n\n    const getLists = () => {\n        console.log('Master List Array contains:');\n        console.log(listArray);\n    };\n\n    return {\n        listArray, addNewList, getNewListName, removeList, getLists\n    };\n})();\n\nconst listFactory = function(name) {\n    const list = Object.create(listFactory.proto);\n\n    list.name = name;\n    list.items = [];\n\n    return list;\n};\n\nlistFactory.proto = {\n    getListName: function() {\n        return this.name;\n    },\n\n    renameList: function(newListName) {   // gets the user provided list name\n        return this.name = newListName;\n    },\n\n    addItem: function(listItem) {\n        return this.items = this.items.concat([listItem]);\n    },\n\n    removeItem: function(itemIndex) {\n        return this.items.splice(itemIndex, 1);\n    }\n};\n\nconst itemFactory = function(title, note, date, priority, done) {\n    const item = Object.create(itemFactory.proto);\n    \n    item.title = title;\n    item.note = note;\n    item.date = date;\n    item.priority = priority;\n    item.done = done;\n\n    return item;\n};\n    \nitemFactory.proto = {    \n    getTitle: function() {\n        return this.title;\n    },\n\n    changeTitle: function(newTitle) {\n        return this.title = newTitle;\n    },\n\n    getNote: function() {\n        return this.note;\n    },\n\n    changeNote: function(newNote) {\n        return this.note = newNote;\n    },\n\n    getDueDate: function() {\n        return this.date;\n    },\n\n    changeDueDate: function(newDueDate) {\n        return this.date = newDueDate;\n    },\n\n    getPriority: function() {\n        return this.priority;\n    },\n\n    changePriority: function() {\n        return this.priority = (this.priority === true) ? false : true;\n    },\n\n    getDoneStatus: function() {\n        return this.done;\n    },\n\n    changeDoneStatus: function() {\n        return this.done = true;\n    },\n    \n    viewDetails: function() {\n        console.table([this.title, this.note, this.date, this.priority, this.done]);\n    }\n};\n\nconst getNewItemInfo = function() {   // gets the user provided item name\n    let newItemInfoArray = [];\n    let itemTitle = prompt('Please describe this item.');\n    let itemNote = prompt('Add a note to this item.');\n    let itemDate = prompt('When is this item due?', '9/25');\n    let itemPriority = false;  \n    let itemDone = false;\n    \n    newItemInfoArray = [itemTitle, itemNote, itemDate, itemPriority, itemDone];\n\n    return newItemInfoArray;\n};\n\nconst newItem = function(itemInfo) {   // creates a new item from user provided input\n    let newUserItem = itemFactory(itemInfo[0], itemInfo[1], itemInfo[2], itemInfo[3], itemInfo[4]);\n    return newUserItem;\n};\n\nconst addItemToList = function(listName, item) {   // adds an item to a specified list\n    listName.items = listName.addItem(item);\n    return listName.items;\n}\n\nconst assignItemToList = function(fromListName, itemIndex, toListName) {   // assigns item from one list to another\n    let itemToMove = fromListName.items.splice(itemIndex, 1);\n    toListName.items.push(itemToMove[0]);\n}\n\nconst initList = (function() {   // initializes app with a default list\n    const currentDate = new Date();\n\n    // Initialize My List\n    masterList.addNewList('Example List');\n    masterList.listArray[0].items = masterList.listArray[0].addItem(itemFactory('To create a list, click on + New List.'));\n    masterList.listArray[0].items = masterList.listArray[0].addItem(itemFactory('To add a list item, click the + button.', 'This line is for notes, and due date is below.', `${currentDate.getMonth()+1}/${currentDate.getDate()}/19`, false));\n    masterList.listArray[0].items = masterList.listArray[0].addItem(itemFactory('To edit the settings of a list or item, click on the ellipsis.', 'Click \"edit\" to make changes. Click the red \"x\" to delete.'));\n    masterList.listArray[0].items = masterList.listArray[0].addItem(itemFactory('Click on the !!! button to prioritize an item.', undefined, undefined, true, false));\n    masterList.listArray[0].items = masterList.listArray[0].addItem(itemFactory('To mark an item as complete, click on its checkbox.', undefined, undefined, false, true));\n\n    // Initialize Buy List\n    masterList.addNewList('Buy List');\n    let buyInfo = itemFactory('Kimchi Ramen', undefined, '7/21/20', true, false);\n    let moreBuyInfo = itemFactory('Soft Soap', 'Get the melon scented one', undefined, false, false);\n    let evenMoreBuyInfo = itemFactory('Detergent', 'If possible, get something eco-friendly');\n\n    masterList.listArray[1].items = masterList.listArray[1].addItem(buyInfo);\n    masterList.listArray[1].items = masterList.listArray[1].addItem(moreBuyInfo);\n    masterList.listArray[1].items = masterList.listArray[1].addItem(evenMoreBuyInfo);\n\n    // Initialize Wish List\n    masterList.addNewList('Wish List');\n    masterList.listArray[2].items = masterList.listArray[2].addItem(itemFactory('Super Nintendo Switch'));\n    masterList.listArray[2].items = masterList.listArray[2].addItem(itemFactory('Xbox Two'));\n    masterList.listArray[2].items = masterList.listArray[2].addItem(itemFactory('PlayStation 5'));\n    masterList.listArray[2].items = masterList.listArray[2].addItem(itemFactory('Oculus Rift Next'));\n\n    // Initialize Vacation Agenda\n    masterList.addNewList('Vacation Itinerary');\n    masterList.listArray[3].items = masterList.listArray[3].addItem(itemFactory('Check out the local music venue', 'Find out what bands are playing', '6/21/20', false, false));\n    masterList.listArray[3].items = masterList.listArray[3].addItem(itemFactory('Eat at NY pizza spot', 'Combo is highly recommended', '6/22/20', true, false));\n    masterList.listArray[3].items = masterList.listArray[3].addItem(itemFactory('Visit the old landmark', 'Located by the dog park', '6/23/20', false, false));\n    masterList.listArray[3].items = masterList.listArray[3].addItem(itemFactory('Shop at the antique store', 'Look for the wooden keychains', '6/24/20', true, false));\n    masterList.listArray[3].items = masterList.listArray[3].addItem(itemFactory('Try the artisan coffee', 'Jacob said to get the nitro brew. If Janet is working, ask her for the ultra craft cold brew.', '6/25/20', false, false));\n    masterList.listArray[3].items = masterList.listArray[3].addItem(itemFactory('Pack up your stuff :(', undefined, '6/26/20', true, false));\n})();\n\n\n\n\n//# sourceURL=webpack:///./src/data.js?");

/***/ }),

/***/ "./src/display.js":
/*!************************!*\
  !*** ./src/display.js ***!
  \************************/
/*! exports provided: initDisplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"initDisplay\", function() { return initDisplay; });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n\n\nconst content = document.getElementById('content');\nconst main = document.createElement('div');\nconst listGrid = document.createElement('div');\nconst itemsGrid = document.createElement('div');\n\n// creates html elements for the listSettings and items\nconst createDisplay = function() {\n    main.setAttribute('id', 'main');\n    listGrid.setAttribute('id', 'listGrid');\n    itemsGrid.setAttribute('id', 'itemsGrid');\n    \n    content.appendChild(main);\n    main.appendChild(listGrid);\n    main.appendChild(itemsGrid);\n};\n\n// creates an input box when clicking + new list\nconst displayNewListInput = function() {\n    const newListInput = document.createElement('input');\n    const newListInputConfirmBtn = document.createElement('button');\n    const newListInputCancelBtn = document.createElement('button');\n\n    newListInput.setAttribute('type', 'text');   \n    newListInput.classList.add(`newListInput`);\n    newListInput.setAttribute('name', 'newListName');\n    newListInput.setAttribute('placeholder', 'Name your list');\n    newListInput.setAttribute('size', '10');\n    newListInput.setAttribute('maxlength', '30');\n\n    listGrid.removeChild(listGrid.firstChild);\n    listGrid.insertAdjacentElement('afterbegin', newListInput);   // replace + New List with a New List input box\n    \n    newListInput.insertAdjacentElement('afterend', newListInputConfirmBtn);   // create a confirmation button next to New List input\n    newListInputConfirmBtn.classList.add('newListInputConfirmBtn');\n    newListInputConfirmBtn.textContent = '+';\n\n    newListInputConfirmBtn.insertAdjacentElement('afterend', newListInputCancelBtn);   // create a cancel button next to confirm button\n    newListInputCancelBtn.classList.add('newListInputCancelBtn');\n    newListInputCancelBtn.textContent = 'x';\n\n    newListInput.focus();\n};\n\n// creates an input box when clicking + new item\nconst displayNewItemInput = function() {\n    const newItemInputTitle = document.createElement('input');\n    const newItemInputCancelBtn = document.createElement('button');\n    const newItemArea = document.querySelector('.newItem');\n\n    newItemInputTitle.setAttribute('type', 'text');   // create a new item title input box\n    newItemInputTitle.classList.add(`newItemInput`);\n    newItemInputTitle.setAttribute('name', 'newItemTitle');\n    newItemInputTitle.setAttribute('placeholder', 'Describe your item here');\n    newItemInputTitle.setAttribute('size', '10');\n    newItemInputTitle.setAttribute('maxlength', '150');\n\n    newItemArea.replaceWith(newItemInputTitle);\n\n    newItemInputTitle.insertAdjacentElement('afterend', newItemInputCancelBtn);   // create a cancel button next to confirm button\n    newItemInputCancelBtn.classList.add('newItemInputCancelBtn');\n    newItemInputCancelBtn.textContent = 'x';\n\n    newItemInputTitle.focus();\n};\n\n// creates an input box for a new note when clicking + new item\nconst displayNewItemInputNote = function() {\n    const newItemInputNote = document.createElement('input');\n\n    newItemInputNote.setAttribute('type', 'text');   // create a new item note input box\n    newItemInputNote.classList.add(`newItemInputNote`);\n    newItemInputNote.setAttribute('name', 'newItemNote');\n    newItemInputNote.setAttribute('placeholder', 'Add a note here');\n    newItemInputNote.setAttribute('size', '10');\n    newItemInputNote.setAttribute('maxlength', '150');\n\n    document.querySelector('.newItemInput').insertAdjacentElement('afterend', newItemInputNote);\n};\n\n// creates an input box for a due date when clicking + new item\nconst displayNewItemInputDate = function() {\n    const newItemInputDate = document.createElement('div');\n    const newItemInputDateHeader = document.createElement('p');\n    const newItemInputDateMonth = document.createElement('input');\n    const newItemInputDateDay = document.createElement('input');\n    const newItemInputDateYear = document.createElement('input');\n\n    newItemInputDate.setAttribute('id', 'newItemInputDate');\n\n    newItemInputDateHeader.classList.add(`newItemInputDateValue`);\n    newItemInputDateHeader.style.cssText = 'font-size: 8pt; font-weight: bold; color: rgb(198, 78, 116)';\n    newItemInputDateHeader.textContent = 'Due Date:';\n    \n    newItemInputDateMonth.setAttribute('type', 'text');\n    newItemInputDateMonth.classList.add(`newItemInputDateValue`);\n    newItemInputDateMonth.setAttribute('name', 'newItemDateMonth');\n    newItemInputDateMonth.setAttribute('placeholder', 'MM');\n    newItemInputDateMonth.setAttribute('size', '2');\n    newItemInputDateMonth.setAttribute('maxlength', '2');\n\n    newItemInputDateDay.setAttribute('type', 'text');\n    newItemInputDateDay.classList.add(`newItemInputDateValue`);\n    newItemInputDateDay.setAttribute('name', 'newItemDateDay');\n    newItemInputDateDay.setAttribute('placeholder', 'DD');\n    newItemInputDateDay.setAttribute('size', '2');\n    newItemInputDateDay.setAttribute('maxlength', '2');\n\n    newItemInputDateYear.setAttribute('type', 'text');\n    newItemInputDateYear.classList.add(`newItemInputDateValue`);\n    newItemInputDateYear.setAttribute('name', 'newItemDateYear');\n    newItemInputDateYear.setAttribute('placeholder', 'YY');\n    newItemInputDateYear.setAttribute('size', '2');\n    newItemInputDateYear.setAttribute('maxlength', '2');\n\n    document.querySelector('.newItemInputNote').insertAdjacentElement('afterend', newItemInputDate);\n    newItemInputDate.appendChild(newItemInputDateHeader);\n    newItemInputDate.appendChild(newItemInputDateMonth);\n    newItemInputDate.appendChild(newItemInputDateDay);\n    newItemInputDate.appendChild(newItemInputDateYear);\n    \n    return {\n        newItemInputDate, newItemInputDateHeader, newItemInputDateDay, newItemInputDateMonth, newItemInputDateYear\n    };\n};\n\n// returns the new list name\nconst appendNewList = function() {\n    const newListToAdd = document.getElementsByClassName('newListInput');\n    const newListName = newListToAdd.newListName;\n    let newNameOfList = newListName.value;\n\n    if (newNameOfList === '') {\n        alert(\"Name of list can't be empty.\");\n        listGrid.firstChild.focus();   // put focus back on input box\n        return false;\n        \n    } else {\n        return newNameOfList;\n    }\n};\n\n// returns the new item title\nconst appendNewItem = function() {\n    const newItemToAdd = document.getElementsByClassName('newItemInput');\n    const newItemNoteToAdd = document.getElementsByClassName('newItemInputNote');\n    const newItemDate = document.querySelectorAll('.newItemInputDateValue');\n    const newItemTitle = newItemToAdd.newItemTitle;\n    const newItemNote = newItemNoteToAdd.newItemNote;\n\n    let newTitleOfItem = newItemTitle.value;\n    let newNoteOfItem = newItemNote.value;\n    let newDateMonthOfItem = newItemDate[1].value;\n    let newDateDayOfItem = newItemDate[2].value;\n    let newDateYearOfItem = newItemDate[3].value;\n    let newDate = `${newDateMonthOfItem}/${newDateDayOfItem}/${newDateYearOfItem}`;\n    let itemInfo = [];\n\n    if (newDateMonthOfItem === '' && newDateDayOfItem === '' && newDateYearOfItem === '') {\n        newDate = undefined;\n    }\n    \n    if (newTitleOfItem !== '') {\n\n        if (newDateMonthOfItem !== '' || newDateDayOfItem !== '' || newDateYearOfItem !== '') {\n\n            if (newDateMonthOfItem.charCodeAt(0) < 48 || newDateMonthOfItem.charCodeAt(0) > 57\n                || newDateMonthOfItem.charCodeAt(1) < 48 || newDateMonthOfItem.charCodeAt(1) > 57\n                || newDateDayOfItem.charCodeAt(0) < 48 || newDateDayOfItem.charCodeAt(0) > 57\n                || newDateDayOfItem.charCodeAt(1) < 48 || newDateDayOfItem.charCodeAt(1) > 57\n                || newDateYearOfItem.charCodeAt(0) < 48 || newDateYearOfItem.charCodeAt(0) > 57\n                || newDateYearOfItem.charCodeAt(1) < 48 || newDateYearOfItem.charCodeAt(1) > 57)  {\n                alert(\"Please enter a valid date.\");\n                return false;\n            \n            } else if (newDateMonthOfItem < 1 || newDateMonthOfItem > 12\n                || newDateDayOfItem < 1 || newDateDayOfItem > 31 \n                || newDateYearOfItem < 0 || newDateYearOfItem.length < 2) {\n                alert(\"Please enter a valid date.\");\n                return false;\n            }\n        \n            itemInfo = [newTitleOfItem, newNoteOfItem, newDate];\n            return itemInfo;\n\n        } else {\n            itemInfo = [newTitleOfItem, newNoteOfItem, newDate];\n            return itemInfo;\n        }\n\n    } else {\n        alert(\"Name of item can't be empty.\");\n        itemsGrid.firstChild.nextSibling.focus();   // put focus back on input box\n        return false;\n    }\n};\n\n// creates an input box for editing a list name\nconst displayEditListInput = function(listIndex) {\n    const editListInput = document.createElement('input');\n    const listToEdit = document.querySelector(`.list${listIndex}`);\n\n    editListInput.setAttribute('type', 'text');   \n    editListInput.classList.add(`editListInput${listIndex}`);\n    editListInput.setAttribute('name', 'editListName');\n    editListInput.setAttribute('size', '10');\n    editListInput.setAttribute('maxlength', '30');\n    \n    listToEdit.replaceWith(editListInput);\n    editListInput.value = _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[listIndex].name;\n    editListInput.focus();\n};\n\n// creates an input box for editing an item title\nconst displayEditItemInput = function(listIndex, itemIndex) {\n    const editItem = document.createElement('p');\n    const editItemInputTitle = document.createElement('input');\n    const editItemInputNote = document.createElement('input');\n    const editItemInputDate = document.createElement('input');\n    const itemTitleToEdit = document.querySelector(`#item${itemIndex}`);\n\n    editItem.setAttribute('id', `editItem${itemIndex}`);\n\n    editItemInputTitle.setAttribute('type', 'text');   // create an edit item title input box\n    editItemInputTitle.classList.add(`editItemInputTitle${itemIndex}`);\n    editItemInputTitle.setAttribute('name', 'editItemTitle');\n    editItemInputTitle.setAttribute('placeholder', 'Describe your item here');\n    editItemInputTitle.setAttribute('size', '10');\n    editItemInputTitle.setAttribute('maxlength', '150');\n\n    editItemInputNote.setAttribute('type', 'text');   // create an edit item note input box\n    editItemInputNote.classList.add(`editItemInputNote${itemIndex}`);\n    editItemInputNote.setAttribute('name', 'editItemNote');\n    editItemInputNote.setAttribute('placeholder', 'Add a note here');\n    editItemInputNote.setAttribute('size', '10');\n    editItemInputNote.setAttribute('maxlength', '150');\n\n    editItemInputDate.setAttribute('type', 'text');   // create an edit item date input box\n    editItemInputDate.classList.add(`editItemInputDate${itemIndex}`);\n    editItemInputDate.setAttribute('name', 'editItemDate');\n    editItemInputDate.setAttribute('placeholder', 'MM/DD/YY');\n    editItemInputDate.setAttribute('size', '10');\n    editItemInputDate.setAttribute('maxlength', '8');\n    \n    itemTitleToEdit.replaceWith(editItem);\n    editItem.appendChild(editItemInputTitle);\n\n    editItemInputTitle.value = _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[listIndex].items[itemIndex].title;\n    editItemInputNote.value = _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[listIndex].items[itemIndex].note;\n    editItemInputDate.value = _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[listIndex].items[itemIndex].date;\n    \n    if (editItemInputNote.value !== 'undefined') {\n        editItem.appendChild(editItemInputNote);\n\n    } else {\n        editItemInputNote.value = '';\n        editItem.appendChild(editItemInputNote);\n    }\n\n    if (editItemInputDate.value !== 'undefined') {\n        editItem.appendChild(editItemInputDate);\n\n    } else {\n        editItemInputDate.value = '';\n        editItem.appendChild(editItemInputDate);\n    }\n    \n    editItemInputTitle.focus();\n}\n\n// returns the edited list name\nconst updateListName = function(listIndex) {\n    const listToEdit = document.getElementsByClassName(`editListInput${listIndex}`);\n    const updatedListName = listToEdit.editListName;   // the \"name\" property of the <input>\n\n    let newNameOfList = updatedListName.value;\n\n    if (newNameOfList === '') {\n        alert(\"Name of list can't be empty.\");\n        return false;\n\n    } else {\n        return newNameOfList;\n    }\n};\n\n// returns the edited item values\nconst updateItem = function(itemIndex) {\n    const itemTitleToEdit = document.querySelector(`.editItemInputTitle${itemIndex}`);\n    const itemNoteToEdit = document.querySelector(`.editItemInputNote${itemIndex}`);\n    const itemDateToEdit = document.querySelector(`.editItemInputDate${itemIndex}`);\n\n    let newItemTitle = itemTitleToEdit.value;\n    let newItemNote = itemNoteToEdit.value;\n    let newItemDate = itemDateToEdit.value;\n    let updatedItem = [newItemTitle, newItemNote, newItemDate];\n\n    (newItemDate === '') ? newItemDate = undefined : newItemDate;\n\n    if (newItemTitle === '') {\n        alert(\"The name of this item can't be empty.\");\n        itemTitleToEdit.focus();\n        return false;\n\n    } else {\n        return updatedItem;\n    }\n};\n\n// creates an edit \"confirm\" save button for list\nconst displayEditListButtons = function(listIndex) {\n    const editButton = document.createElement('button');\n\n    document.querySelector(`.listEditBtn${listIndex}`).remove();\n    document.querySelector(`.listSettingsBtn${listIndex}`).insertAdjacentElement('afterend', editButton).classList.add(`editSaveBtn${listIndex}`);\n    document.querySelector(`.listSettingsBtn${listIndex}`).nextSibling.textContent = 'SAVE';\n};\n\n// creates an edit \"confirm\" save button for item\nconst displayEditItemButtons = function(itemIndex) {\n    const editButton = document.createElement('button');\n\n    document.querySelector(`.itemEditBtn${itemIndex}`).remove();\n    document.querySelector(`.itemSettingsBtn${itemIndex}`).insertAdjacentElement('afterend', editButton).classList.add(`editItemSaveBtn${itemIndex}`);\n    document.querySelector(`.itemSettingsBtn${itemIndex}`).nextSibling.textContent = 'SAVE';\n};\n\n// creates and displays the + New List button\nconst displayNewListButton = function() {\n    const newListBtn = document.createElement('p');\n\n    listGrid.insertAdjacentElement('afterbegin', newListBtn);\n    newListBtn.classList.add(`newList`);\n    newListBtn.textContent = '+ New List';\n};\n\n// creates list settings buttons: edit and delete\nconst displayListButtons = function() {\n    const listSettings = document.querySelectorAll(\"[class^='listSettingsBtn']\");\n\n    listSettings.forEach((list, listIndex) => {\n        list.insertAdjacentElement('afterend', document.createElement('button'));\n        list.nextSibling.classList.add(`listEditBtn${listIndex}`);\n        list.nextSibling.textContent = 'EDIT';\n        \n        list.nextSibling.insertAdjacentElement('afterend', document.createElement('button'));\n        list.nextSibling.nextSibling.classList.add(`listDeleteBtn${listIndex}`);\n        list.nextSibling.nextSibling.textContent = 'X';\n    });\n};\n\n// creates item settings buttons\nconst displayItemsButtons = function() {\n    const itemSettings = document.querySelectorAll(\"[class^='itemSettingsBtn']\");\n\n    itemSettings.forEach((item, itemIndex) => {\n        item.insertAdjacentElement('afterend', document.createElement('button'));\n        item.nextSibling.classList.add(`itemEditBtn${itemIndex}`);\n        item.nextSibling.textContent = 'EDIT';\n        \n        item.nextSibling.insertAdjacentElement('afterend', document.createElement('button'));\n        item.nextSibling.nextSibling.classList.add(`itemDeleteBtn${itemIndex}`);\n        item.nextSibling.nextSibling.textContent = 'X';\n    });\n};\n\n// creates and fills the page with all lists\nconst displayListGrid = function() {\n    displayNewListButton();\n\n    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray.forEach((list, index, theListArray) => {   // populate the list grid with all listSettings in master array\n        listGrid.appendChild(document.createElement('p')).classList.add(`list${index}`);\n        document.querySelector(`.list${index}`).textContent = list.name;\n    });\n\n    const listSettings = document.querySelectorAll(\"[class^='list']\");\n    const settingsSymbol = '\\u{22EE}'; // the ellipsis: ⋮\n\n    listSettings.forEach((list, listIndex) => {   // create a settings button next to each list\n        list.insertAdjacentElement('afterend', document.createElement('button')); \n        list.nextSibling.classList.add(`listSettingsBtn${listIndex}`);\n        list.nextSibling.textContent = settingsSymbol;\n    });\n};\n\n// highlights the current selected list\nconst highlightList = function(listIndex) {\n    document.querySelector(`.list${listIndex}`).classList.add('currentList');\n};\n\n// display the current list's items\nconst displayItemsGrid = function(listIndex) {   \n    const newItemBtn = document.createElement('button');\n    const blankItem = document.createElement('p');\n    const settingsSymbol = '\\u{22EE}';   // the ellipsis: ⋮\n    \n    itemsGrid.appendChild(newItemBtn);  // create a new item button\n    newItemBtn.classList.add(`newItemButton`);\n    newItemBtn.textContent = '+';\n    itemsGrid.appendChild(blankItem).classList.add(`newItem`);   // create a new blank item\n\n    if (listIndex >= 0) {   // if there is at least 1 list on the page \n    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[listIndex].items.forEach((item, index, itemsArray) => {   // render all items to the list\n        const itemCheckBox = document.createElement('button');\n        const itemTitle = document.createElement('p');\n        const itemDate = document.createElement('p');\n        const itemNote = document.createElement('p');\n        const itemPriority = document.createElement('p');\n        const itemSettingsBtn = document.createElement('button');\n        \n        itemsGrid.appendChild(itemCheckBox).classList.add(`itemCheck${index}`);   // create a checkbox for every item\n        itemsGrid.appendChild(itemTitle).setAttribute('id', `item${index}`);   // create a <p> element with class \"item\" for every item\n        itemsGrid.appendChild(itemPriority);\n        itemsGrid.appendChild(itemSettingsBtn).classList.add(`itemSettingsBtn${index}`);   // create an item settings button for every item\n\n        itemCheckBox.textContent = ``;\n        itemTitle.textContent = `${item.title}`;\n        itemPriority.textContent = `!!!`;\n        itemSettingsBtn.textContent = settingsSymbol;\n\n        if (item.priority === false || item.priority === undefined) {\n            itemPriority.classList.add(`notPriority${index}`);   // create a <p> element with priority inactive\n\n        } else {\n            itemTitle.classList.add('itemPriority');   // change item color to red\n            itemPriority.classList.add(`priority${index}`);   // create a <p> element with priority active\n        }\n\n        if (item.note !== undefined && item.date !== undefined && item.date !== '') {   // if a date and note exists\n            itemTitle.insertAdjacentElement('beforeend', itemNote);\n            itemNote.insertAdjacentElement('afterend', itemDate)\n            itemNote.classList.add(`note${index}`);   \n            itemDate.classList.add(`date${index}`);\n            itemNote.textContent = `${item.note}`;\n            itemDate.textContent = `Due: ${item.date}`;\n\n        } else if (item.note !== undefined) {   // if only a note exists\n            itemTitle.insertAdjacentElement('beforeend', itemNote);\n            itemNote.classList.add(`note${index}`);\n            itemNote.textContent = `${item.note}`;\n\n        } else if (item.date !== undefined & item.date !== '') {   // if only a due date exists\n            itemTitle.insertAdjacentElement('beforeend', itemDate);\n            itemDate.classList.add(`date${index}`);\n            itemDate.textContent = `Due: ${item.date}`;\n        }   \n\n        if (item.done === true) {\n            itemTitle.classList.add('itemDone');   // create a <p> element with \"done\" inactive\n            itemCheckBox.classList.add('itemCheckDone');\n            itemCheckBox.textContent = `X`;\n\n        } else {\n            itemTitle.classList.remove('itemDone');\n            itemCheckBox.classList.remove('itemCheckDone');\n        }\n    });\n    }\n};\n\n// wipe the list and items grids clean\nconst refreshDisplay = function() {\n    document.querySelectorAll('#itemsGrid').forEach((item, itemIndex) => {\n        while (itemsGrid.firstChild) {\n            itemsGrid.removeChild(itemsGrid.firstChild);\n        }\n    });\n\n    document.querySelectorAll('#listGrid').forEach((list, itemIndex) => {\n        while (listGrid.firstChild) {\n            listGrid.removeChild(listGrid.firstChild);\n          }\n    });\n};\n\n// create button listeners for the list grid\nconst createListeners = (function() {\n    let lastClickedList = 0;   // store the last clicked list\n    let deletedList;\n    let listSettingBtnClicked = false;\n    let itemSettingBtnClicked = false;\n\n    const startListListeners = function() {\n        listGrid.addEventListener('click', clickListGrid, false);\n        itemsGrid.addEventListener('click', clickItemGrid, false);\n\n        // return the index of a clicked element\n        const getTargetIndex = function(event, listElement) {   \n            let targetIndex = '';\n            \n            if (listElement && listElement.indexOf('currentList') === -1) {   // checks if an index has been passed. if not, gets index from element click.\n                targetIndex = String(listElement).replace(/[^0-9]/g,'');\n            \n            } else if (listElement && listElement.indexOf('currentList') > -1) {   // checks if an index has been passed and if it is the current list\n                targetIndex = String(listElement).replace(/[^0-9]/g,'');\n            \n            } else if (event.target.className.indexOf('currentList') > -1) {\n                targetIndex = String(event.target.className).replace(/[^0-9]/g,'');\n\n            } else {\n                targetIndex = String(event.target.className).replace(/[^0-9]/g,'');\n            }\n\n            return +targetIndex;\n        };\n        \n        // handles all clicks on the Lists\n        function clickListGrid(e) {\n            const clickClassName = e.target.className;\n            const lists = listGrid.querySelectorAll(\"p[class^='list']\");\n            let listElements = Array.from(lists);   // put all .list elements in an array\n\n            if (listElements.indexOf(e.target) >= 0 && e.target !== e.currentTarget) {   // click a list element\n                lastClickedList = getTargetIndex(e, clickClassName);\n                refreshDisplay();\n                displayListGrid();\n                displayItemsGrid(getTargetIndex(e));\n                highlightList(getTargetIndex(e));\n\n            } else if (clickClassName === 'newList' && e.target !== e.currentTarget) {   // click the \"new list\" button\n                displayNewListInput();\n\n            } else if (clickClassName === 'newListInputConfirmBtn' && e.target !== e.currentTarget) {   // click the \"add new list\" button\n                \n                if (appendNewList() !== false) {   // if the new list name is not empty\n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].addNewList(appendNewList());\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(getTargetIndex(e, listGrid.lastChild.className));\n                    highlightList(getTargetIndex(e, listGrid.lastChild.className));\n                    lastClickedList = getTargetIndex(e, listGrid.lastChild.className);\n                }\n\n            } else if (clickClassName === 'newListInputCancelBtn' && e.target !== e.currentTarget) {   // click the \"cancel new list\" button\n\n                if (clickClassName === listGrid.lastChild.className) {\n                    refreshDisplay();\n                    displayNewListButton();\n                    displayItemsGrid();\n\n                } else {\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n                }\n            }\n            \n            // handles all clicks on the list settings\n            if (listSettingBtnClicked === true && clickClassName.indexOf('newList') < 0) {\n\n                if (clickClassName.indexOf('listEditBtn') > -1 && e.target !== e.currentTarget) {   // press the edit list button\n                    lastClickedList = getTargetIndex(e, clickClassName);   // gets the index of list whose edit button was clicked\n\n                    if (clickClassName !== `editSaveBtn${lastClickedList}`) {\n                        refreshDisplay();\n                        displayListGrid();\n                        displayItemsGrid(lastClickedList);\n                        displayListButtons();\n                        displayEditListInput(lastClickedList);\n                        displayEditListButtons(lastClickedList);  // might be better to revert to changing the classname to editSaveBtn${listIndex}.\n                        listSettingBtnClicked = true;\n                    } \n\n                } else if (clickClassName === `editSaveBtn${getTargetIndex(e, clickClassName)}` && e.target !== e.currentTarget) {\n\n                    lastClickedList = getTargetIndex(e, clickClassName);   // gets the index of list whose edit button was clicked\n\n                    if (updateListName(lastClickedList) !== false) {\n                        _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].renameList(updateListName(lastClickedList));\n                        lastClickedList = getTargetIndex(e, clickClassName);   // gets the index of list whose save button was clicked\n                        refreshDisplay();\n                        displayListGrid();\n                        displayListButtons();\n                        displayItemsGrid(lastClickedList);\n                        highlightList(lastClickedList);\n                        listSettingBtnClicked = true;\n\n                    } else {\n                        document.querySelector('input').focus();\n                    }\n\n                } else if (clickClassName.indexOf('listDeleteBtn') > -1 && e.target !== e.currentTarget) {   // press the delete list button and remove the list based on its index\n                    deletedList = getTargetIndex(e);\n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].removeList(getTargetIndex(e));\n                    refreshDisplay();\n                    displayListGrid();\n\n                    if (listGrid.lastChild.className === 'newList') {   // all lists were deleted\n                        displayItemsGrid();   // just show the \"add item\" button and empty item\n\n                    } else if (getTargetIndex(e, clickClassName) < lastClickedList || deletedList > getTargetIndex(e, listGrid.lastChild.className) && getTargetIndex(e, clickClassName) === lastClickedList) {\n                        lastClickedList--;\n                        displayItemsGrid(lastClickedList);\n                        highlightList(lastClickedList);\n                    \n                    } else if (getTargetIndex(e, clickClassName) > lastClickedList || getTargetIndex(e, clickClassName) === lastClickedList) {\n                        displayItemsGrid(lastClickedList);\n                        highlightList(lastClickedList);\n                    }\n\n                    listSettingBtnClicked = false;\n\n                } else if (clickClassName !== `editListInput${getTargetIndex(e, clickClassName)}`) {   // refresh the list if the list settings button was clicked\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n                    listSettingBtnClicked = false;\n                }\n\n            } else if (clickClassName === `listSettingsBtn${getTargetIndex(e, clickClassName)}`) {   // if the list settings button is not open\n                lastClickedList = getTargetIndex(e, clickClassName);\n                refreshDisplay();\n                displayListGrid();\n                displayListButtons();\n                displayItemsGrid(lastClickedList);\n                highlightList(lastClickedList);\n                listSettingBtnClicked = true;\n            }\n\n            e.stopPropagation();\n        }\n\n        // handles all clicks on the items\n        function clickItemGrid(e) {\n            const clickClassName = e.target.className;\n\n            // click on + new item button\n            if (clickClassName === 'newItemButton' && itemsGrid.firstChild.nextSibling.className === 'newItem') {   // display new item input if it's not open already\n                displayNewItemInput();\n                displayNewItemInputNote();\n                displayNewItemInputDate();\n\n            } else if (clickClassName === 'newItemButton' && itemsGrid.firstChild.nextSibling.className !== 'newItem') {   // if the new item input is open and + button is pressed\n\n                if (appendNewItem() !== false && _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[0] !== undefined) {\n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items = \n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].addItem(Object(_data_js__WEBPACK_IMPORTED_MODULE_0__[\"itemFactory\"])(appendNewItem()[0], appendNewItem()[1], appendNewItem()[2]));\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n\n                } else if (_data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[0] === undefined) {   // if no lists exist\n                    alert('Please create a new list first.')\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid();\n                    displayNewListInput();\n                \n                } else {\n                    document.querySelector('input').focus();\n                }\n\n            } else if (clickClassName === 'newItemInputCancelBtn') {   // new item cancel button is clicked\n                refreshDisplay();\n                displayListGrid();\n\n                if (_data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[0] === undefined) {   // if no lists exist\n                    refreshDisplay();\n                    displayItemsGrid();\n                    displayListGrid();\n                \n                } else {\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n                }\n            }\n            \n            // click on the item settings button\n            if (itemSettingBtnClicked === true && itemsGrid.lastChild.className.indexOf('itemDeleteBtn') > -1 && clickClassName !== 'newItemButton') {   // if the item settings are open (delete button is visible)\n\n                if (clickClassName === `itemEditBtn${getTargetIndex(e, clickClassName)}`) {   // if the edit item button clicked on\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    displayItemsButtons();\n                    displayEditItemButtons(getTargetIndex(e, clickClassName));\n                    displayEditItemInput(lastClickedList, getTargetIndex(e, clickClassName));\n                    highlightList(lastClickedList);\n                    itemSettingBtnClicked = true;\n\n                } else if (clickClassName === `editItemSaveBtn${getTargetIndex(e, clickClassName)}`) {   // if the save button is clicked on\n\n                    if (updateItem(getTargetIndex(e, clickClassName)) !== false) {\n                        _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].changeTitle(updateItem(getTargetIndex(e, clickClassName))[0]);\n                        _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].changeNote(updateItem(getTargetIndex(e, clickClassName))[1]);\n                        _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].changeDueDate(updateItem(getTargetIndex(e, clickClassName))[2]);\n                        refreshDisplay();\n                        displayListGrid();\n                        displayItemsGrid(lastClickedList);\n                        displayItemsButtons();\n                        highlightList(lastClickedList);\n                        itemSettingBtnClicked = true;\n                    } \n\n                } else if (clickClassName.indexOf('itemDeleteBtn') > -1 && e.target !== e.currentTarget) {   // press the delete item button and remove the item based on its index\n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].removeItem(getTargetIndex(e, clickClassName));\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    displayItemsButtons();\n                    highlightList(lastClickedList);\n                    itemSettingBtnClicked = true;\n\n                } else if (clickClassName === `itemSettingsBtn${getTargetIndex(e, clickClassName)}`) {   // refresh if the item settings button was clicked again\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n                    itemSettingBtnClicked = false;\n                }\n\n            } else if (clickClassName === `itemSettingsBtn${getTargetIndex(e, clickClassName)}`) {   // if the list settings button is not open\n                refreshDisplay();\n                displayListGrid();\n                displayItemsGrid(lastClickedList);\n                displayItemsButtons();\n                highlightList(lastClickedList);\n                itemSettingBtnClicked = true;\n            }\n\n            // click on the item's priority\n            if (clickClassName === `notPriority${getTargetIndex(e, clickClassName)}`) {\n                _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].priority = true;\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n\n            } else if (clickClassName === `priority${getTargetIndex(e, clickClassName)}`) {\n                _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].priority = false;\n                    refreshDisplay();\n                    displayListGrid();\n                    displayItemsGrid(lastClickedList);\n                    highlightList(lastClickedList);\n            }\n\n            // click on item checkbox\n            if (clickClassName.indexOf('itemCheck') > -1) { \n                \n                // make the item red/checked\n                if (_data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].done !== true) {\n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].done = true;\n                 \n                } else if (clickClassName.indexOf('itemCheckDone') > -1) {\n                    _data_js__WEBPACK_IMPORTED_MODULE_0__[\"masterList\"].listArray[lastClickedList].items[getTargetIndex(e, clickClassName)].done = false;\n                }\n\n                refreshDisplay();\n                displayListGrid();\n                displayItemsGrid(lastClickedList);\n                highlightList(lastClickedList);\n            }\n\n            e.stopPropagation();\n        }\n    } \n    return { \n        startListListeners \n    };\n})();\n\n// initializes app display\nconst initDisplay = (() => {\n    const appHeader = document.createElement('h1');   // create the header\n    const subHeader = document.createElement('p');\n    const checkMark = '\\u{2713}';   // the ellipsis: ⋮\n\n    appHeader.textContent = `${checkMark} DO`;\n    content.insertAdjacentElement('afterbegin', appHeader);\n    appHeader.insertAdjacentElement('afterend', subHeader);\n    subHeader.classList.add('subHeader');\n    subHeader.textContent = 'The best to-do list since paper.';\n\n    createDisplay();\n    displayListGrid();\n    displayItemsGrid(0);\n    highlightList(0);\n    createListeners.startListListeners();\n})();\n\n\n\n\n//# sourceURL=webpack:///./src/display.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"./src/data.js\");\n/* harmony import */ var _display_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./display.js */ \"./src/display.js\");\n\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });